{"version":3,"sources":["ThumbImage/index.js","ContentList/index.js","Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["ThumbImage","props","href","className","onClick","event","preventDefault","action","id","alt","src","url","ContentList","items","map","item","key","Modal","closeHandler","contentRef","current","target","closest","renderComment","comment","text","date","getDateStr","changeInput","name","value","formData","state","setState","submitForm","dataSending","fetch","method","headers","body","JSON","stringify","then","response","status","errors","json","data","React","createRef","mounted","infoLoaded","this","ref","aria-label","d","Date","yy","getFullYear","mm","getMonth","toString","padStart","dd","getDate","comments","length","onSubmit","disabled","type","onChange","renderLoader","PureComponent","App","closeModal","showImage","imageId","currentDate","images","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d5832ec.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport function ThumbImage(props) {\n    return <a\n        href='/'\n        className='thumb-image'\n        onClick={(event) => { event.preventDefault(); props.action(props.id) }}>\n        <img className='thumb-image__content' alt='' src={props.url} />\n    </a>;\n}\n","import React from 'react';\nimport { ThumbImage } from './../ThumbImage';\nimport './index.css';\n\nexport function ContentList(props) {\n    const { items } = props; // items = props.items\n\n    return <ul className='content-list'>\n        {items.map(item => (\n            <li className='content-list__item' key={item.id}>\n                <ThumbImage id={item.id} url={item.url} action={props.action} />\n            </li>\n        ))}\n    </ul>;\n}\n","import React from 'react';\nimport './index.css';\n\nexport class Modal extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.contentRef = React.createRef();\n        this.mounted = true;\n        this.state = {\n            infoLoaded: false,\n            formData: {},\n            dataSending: false,\n            errors: {}\n        };\n    }\n\n    componentDidMount() {\n        const {id} = this.props;\n\n        fetch(`https://boiling-refuge-66454.herokuapp.com/images/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                if (this.mounted && id === data.id) {\n                    this.setState({\n                        ...data,\n                        infoLoaded: true\n                    });\n                }\n            });\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    closeHandler = (event) => {\n        if (this.contentRef.current &&\n            event.target.closest('.modal__content') !== this.contentRef.current &&\n            this.props.closeHandler) {\n            this.props.closeHandler();\n        }\n    }\n\n    renderLoader() {\n        const {closeHandler} = this.props;\n\n        return <div className='modal' onClick={this.closeHandler}>\n            <div className='modal__content' ref={this.contentRef}>\n                <button\n                    onClick={closeHandler}\n                    className='modal__close'\n                    aria-label='close modal window'>\n                    X\n                </button>\n                Loading ...\n            </div>\n        </div>\n    }\n\n    getDateStr(date) {\n        const d = new Date(date),\n            yy = d.getFullYear(),\n            mm = (d.getMonth() + 1).toString().padStart(2, '0'),\n            dd = d.getDate().toString().padStart(2, '0');\n\n        return `${dd}.${mm}.${yy}`;\n    }\n\n    renderComment = (comment) => {\n        const {id, text, date} = comment;\n\n        return <li key={id} className='modal__comment'>\n                <div className='modal__comment-date'>\n                    {this.getDateStr(date)}\n                </div>\n                <div className='modal__comment-text'>\n                    {text}\n                </div>\n            </li>;\n    }\n\n    changeInput = (event) => {\n        const {target} = event,\n            {name, value} = target,\n            {formData} = this.state;\n\n        this.setState({\n            formData: {\n                ...formData,\n                [name]: value\n            }\n        });\n    }\n\n    submitForm = event => {\n        event.preventDefault();\n\n        const {formData} = this.state,\n            {id} = this.props;\n\n        this.setState({\n            dataSending: true\n        });\n\n        fetch(`https://boiling-refuge-66454.herokuapp.com/images/${id}/comments`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify(formData)\n        })\n        .then(response => {\n            const {status} = response;\n\n            if (status === 204) {\n                this.setState({\n                    dataSending: false,\n                    formData: {},\n                    errors: {}\n                });\n\n                return false;\n            } else {\n                return response.json();\n            }\n        })\n        .then(data => {\n            if (data) {\n                this.setState({\n                    dataSending: false,\n                    errors: data.errors\n                });\n            }\n        });\n    }\n\n    render() {\n        const {closeHandler} = this.props,\n            {infoLoaded, url, comments, formData, dataSending, errors} = this.state,\n            {name = '', comment = ''} = formData;\n\n        if (!infoLoaded) {\n            return this.renderLoader();\n        }\n\n        return <div className='modal' onClick={this.closeHandler}>\n            <div className='modal__content' ref={this.contentRef}>\n                <button\n                    onClick={closeHandler}\n                    className='modal__close'\n                    aria-label='close modal window'>\n                    X\n                </button>\n\n                <div className='modal__content-wrapper'>\n                    <div className='modal__content-column'>\n                        <img\n                            className='modal__image'\n                            src={url}\n                            alt=''/>\n                    </div>\n                    <ul className='modal__content-column'>\n                        {comments && comments.length > 0 &&\n                            comments.map(this.renderComment)}\n                    </ul>\n                </div>\n                <form className='modal__add-comment' onSubmit={this.submitForm}>\n                    <label className='modal__input-wrapper'>\n                        <input\n                            disabled={dataSending}\n                            className='modal__input'\n                            type='text'\n                            name='name'\n                            value={name}\n                            onChange={this.changeInput}/>\n                        <span className='modal__input-label'>Ваше имя</span>\n                        {errors.name &&\n                            <div>{errors.name}</div>}\n                    </label>\n                    <label className='modal__input-wrapper'>\n                        <input\n                            disabled={dataSending}\n                            className='modal__input'\n                            type='text'\n                            name='comment'\n                            value={comment}\n                            onChange={this.changeInput}/>\n                        <span className='modal__input-label'>Ваш комментарий</span>\n                        {errors.comment &&\n                            <div>{errors.comment}</div>}\n                    </label>\n                    <button className='modal__submit' type='submit' disabled={dataSending}>\n                        Оставить комментарий\n                    </button>\n                </form>\n            </div>\n        </div>\n    }\n}\n","import React from 'react';\nimport { ContentList } from './ContentList';\nimport { Modal } from './Modal';\nimport './App.css';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentDate: new Date(),\n      images: null,\n      showImage: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://boiling-refuge-66454.herokuapp.com/images')\n      .then(response => response.json())\n      .then(images => {\n        this.setState({images})\n      });\n  }\n\n  closeModal = () => {\n    this.setState({showImage: null});\n  }\n\n  showImage = (imageId) => {\n    this.setState({showImage: imageId});\n  }\n\n  render() {\n    const {currentDate, images, showImage} = this.state;\n\n    return (\n      <>\n        <h1 className=\"app-header\">\n          Test App\n        </h1>\n        <main className=\"app-content\">\n          {images\n            ? <ContentList items={images} action={this.showImage} />\n            : 'Loading...'}\n        </main>\n        {\n          showImage && <Modal\n            id={showImage}\n            closeHandler={this.closeModal} />\n        }\n        <footer className=\"app-footer\">\n          © 2018 - {currentDate.getFullYear()}\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}